name: CI
on:
  push:
    branches:
      - main
    paths:
      - src/**
      - tests/**
      - Cargo.toml
      - Cargo.lock
      - Containerfile
      - .github/workflows/**
  pull_request:
    branches:
      - main
    paths:
      - src/**
      - tests/**
      - Cargo.toml
      - Cargo.lock
      - Containerfile
      - .github/workflows/**
env:
  CARGO_TERM_COLOR: always
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Enable cached dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install protoc
        uses: arduino/setup-protoc@v3
      - name: Check linting
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      - name: Check formatting
        run: cargo fmt --all --check
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Enable cached dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install protoc
        uses: arduino/setup-protoc@v3
      - name: Run tests
        run: cargo test --workspace --all-features --all-targets
  build-container-image:
    needs:
      - check
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Enable caching
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            usr-local-cargo-registry
            app-target
          key: cache-${{ hashFiles('Cargo.lock', 'Containerfile') }}
          restore-keys: |
            cache-
      - name: Inject cache
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "usr-local-cargo-registry": "/usr/local/cargo/registry",
              "app-target": "/app/target"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}
      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: Containerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
